-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeServerAcl
local SlipeSharedExceptions
local ArrayAclEntry
local ArrayAclGroup
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeServerAcl = Slipe.Server.Acl
  SlipeSharedExceptions = Slipe.Shared.Exceptions
  ArrayAclEntry = System.Array(SlipeServerAcl.AclEntry)
  ArrayAclGroup = System.Array(SlipeServerAcl.AclGroup)
end)
System.namespace("Slipe.Server.Acl", function (namespace)
  -- <summary>
  -- Class that represents a group of different ACL entries
  -- </summary>
  namespace.class("AclGroup", function (namespace)
    local getACL, getName, getEntries, getObjects, getAll, Get, AddEntry, AddObject, 
    RemoveEntry, RemoveObject, Destroy, class, __ctor1__, __ctor2__
    __ctor1__ = function (this, mtaAclGroup)
      this.group = mtaAclGroup
    end
    -- <summary>
    -- Create a new ACL group
    -- </summary>
    __ctor2__ = function (this, name)
      __ctor1__(this, SlipeMtaDefinitions.MtaServer.AclCreateGroup(name))
    end
    getACL = function (this)
      return this.group
    end
    getName = function (this)
      return SlipeMtaDefinitions.MtaServer.AclGroupGetName(this.group)
    end
    getEntries = function (this)
      local mtaentires = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.AclGroupListACL(this.group), "acl", T)
      local entries = ArrayAclEntry:new(#mtaentires)
      for i = 0, #mtaentires - 1 do
        entries:set(i, SlipeServerAcl.AclEntry(mtaentires:get(i)))
      end
      return entries
    end
    getObjects = function (this)
      return SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.AclGroupListObjects(this.group), "acl-object", T)
    end
    getAll = function ()
      local mtagroups = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaServer.AclGroupList(), "acl-group", T)
      local groups = ArrayAclGroup:new(#mtagroups)
      for i = 0, #mtagroups - 1 do
        groups:set(i, class(mtagroups:get(i)))
      end
      return groups
    end
    -- <summary>
    -- Get an ACL group instance from the name of the group
    -- </summary>
    Get = function (name)
      local result = SlipeMtaDefinitions.MtaServer.AclGetGroup(name)
      if result == nil then
        System.throw(SlipeSharedExceptions.NullElementException("No ACL entry with the name " .. name .. " can be found"))
      end
      return class(result)
    end
    -- <summary>
    -- Add a new ACL entry to this group
    -- </summary>
    AddEntry = function (this, entry)
      return SlipeMtaDefinitions.MtaServer.AclGroupAddACL(this.group, entry:getACL())
    end
    -- <summary>
    -- Add a new object to this group
    -- </summary>
    AddObject = function (this, obj)
      return SlipeMtaDefinitions.MtaServer.AclGroupAddObject(this.group, obj:getACLIdentifier())
    end
    -- <summary>
    -- Remove an ACL entry from this group
    -- </summary>
    RemoveEntry = function (this, entry)
      return SlipeMtaDefinitions.MtaServer.AclGroupRemoveACL(this.group, entry:getACL())
    end
    -- <summary>
    -- Remove an ACL object form this group
    -- </summary>
    RemoveObject = function (this, obj)
      return SlipeMtaDefinitions.MtaServer.AclGroupRemoveObject(this.group, obj:getACLIdentifier())
    end
    -- <summary>
    -- Delete this ACL group
    -- </summary>
    Destroy = function (this)
      return SlipeMtaDefinitions.MtaServer.AclDestroyGroup(this.group)
    end
    class = {
      getACL = getACL,
      getName = getName,
      getEntries = getEntries,
      getObjects = getObjects,
      getAll = getAll,
      Get = Get,
      AddEntry = AddEntry,
      AddObject = AddObject,
      RemoveEntry = RemoveEntry,
      RemoveObject = RemoveObject,
      Destroy = Destroy,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
