-- Generated by CSharp.lua Compiler
local System = System
local SlipeServerAccounts
local ArrayAccount
local DictObjectAccount
System.import(function (out)
  SlipeServerAccounts = Slipe.Server.Accounts
  ArrayAccount = System.Array(SlipeServerAccounts.Account)
  DictObjectAccount = System.Dictionary(System.Object, SlipeServerAccounts.Account)
end)
System.namespace("Slipe.Server.Accounts", function (namespace)
  -- <summary>
  -- Manages accounts
  -- </summary>
  namespace.class("AccountManager", function (namespace)
    local instance, getInstance, RegisterAccount, GetAccount, CastMultiple, class, __ctor__
    __ctor__ = function (this)
      this.accounts = DictObjectAccount()
    end
    getInstance = function ()
      if instance == nil then
        instance = class()
      end
      return instance
    end
    -- <summary>
    -- Registers an account class
    -- </summary>
    RegisterAccount = function (this, account)
      this.accounts:Add(account.MTAAccount, account)
    end
    -- <summary>
    -- Gets an account class instance given a certain MTA account
    -- </summary>
    GetAccount = function (this, account)
      if account == nil then
        return nil
      end
      if not this.accounts:ContainsKey(account) then
        return SlipeServerAccounts.Account(account)
      end
      return this.accounts:get(account)
    end
    -- <summary>
    -- Cast an array of Accounts to a desired type
    -- </summary>
    CastMultiple = function (this, accounts)
      local result = ArrayAccount:new(#accounts)
      for i = 0, #accounts - 1 do
        result:set(i, GetAccount(getInstance(), accounts:get(i)))
      end
      return result
    end
    class = {
      getInstance = getInstance,
      RegisterAccount = RegisterAccount,
      GetAccount = GetAccount,
      CastMultiple = CastMultiple,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
