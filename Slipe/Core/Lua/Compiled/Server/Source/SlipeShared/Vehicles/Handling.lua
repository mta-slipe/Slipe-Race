-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeSharedVehicles
local SystemNumerics
local ArraySingle
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedVehicles = Slipe.Shared.Vehicles
  SystemNumerics = System.Numerics
  ArraySingle = System.Array(System.Single)
end)
System.namespace("Slipe.Shared.Vehicles", function (namespace)
  -- <summary>
  -- Represents vehicle handling properties
  -- </summary>
  namespace.class("Handling", function (namespace)
    local getMass, setMass, getTurnMass, setTurnMass, getDragCoefficient, setDragCoefficient, getCenterOfMass, setCenterOfMass, 
    getPercentSubmerged, setPercentSubmerged, getTractionMultiplier, setTractionMultiplier, getTractionLoss, setTractionLoss, getTractionBias, setTractionBias, 
    getNumberOfGears, setNumberOfGears, getMaxVelocity, setMaxVelocity, getEngineAcceleration, setEngineAcceleration, getEngineInertia, setEngineInertia, 
    getDriveType, setDriveType, getEngineType, setEngineType, getBrakeDeceleration, setBrakeDeceleration, getBrakeBias, setBrakeBias, 
    getSteeringLock, setSteeringLock, getSuspensionForceLevel, setSuspensionForceLevel, getSuspensionDamping, setSuspensionDamping, getSuspensionHighSpeedDamping, setSuspensionHighSpeedDamping, 
    getSuspensionUpperLimit, setSuspensionUpperLimit, getSuspensionLowerLimit, setSuspensionLowerLimit, getSuspensionFrontRearBias, setSuspensionFrontRearBias, getSuspensionAntiDiveMultiplier, setSuspensionAntiDiveMultiplier, 
    getSeatOffsetDistance, setSeatOffsetDistance, getCollisionDamageMultiplier, setCollisionDamageMultiplier, getMonetary, getModelFlags, setModelFlags, getHandlingFlags, 
    setHandlingFlags, getHeadLight, setHeadLight, getTailLight, setTailLight, getAnimationGroup, setAnimationGroup, BuildFromTable, 
    UpdateFromGame, UpdateToGame, internal, __ctor1__, __ctor2__, __ctor3__
    internal = function (this)
      this.centerOfMass = System.default(SystemNumerics.Vector3)
    end
    __ctor1__ = function (this)
      internal(this)
    end
    -- <summary>
    -- Builds vehicle handling from a vehicle
    -- </summary>
    __ctor2__ = function (this, vehicle)
      internal(this)
      this.vehicleElement = vehicle:getMTAElement()
    end
    -- <summary>
    -- Build a vehicle handling instance from a raw handling table
    -- </summary>
    __ctor3__ = function (this, raw)
      internal(this)
      BuildFromTable(this, raw)
    end
    getMass = function (this)
      this:UpdateFromGame()
      return this.mass
    end
    setMass = function (this, value)
      this:UpdateToGame("mass", value)
    end
    getTurnMass = function (this)
      this:UpdateFromGame()
      return this.turnMass
    end
    setTurnMass = function (this, value)
      this:UpdateToGame("turnMass", value)
    end
    getDragCoefficient = function (this)
      this:UpdateFromGame()
      return this.dragCoeff
    end
    setDragCoefficient = function (this, value)
      this:UpdateToGame("dragCoeff", value)
    end
    getCenterOfMass = function (this)
      this:UpdateFromGame()
      return this.centerOfMass:__clone__()
    end
    setCenterOfMass = function (this, value)
      local ar = ArraySingle:new(3)
      ar:set(1, value.X)
      ar:set(2, value.Y)
      ar:set(3, value.Z)
      this:UpdateToGame("centerOfMass", ar)
    end
    getPercentSubmerged = function (this)
      this:UpdateFromGame()
      return this.percentSubmerged
    end
    setPercentSubmerged = function (this, value)
      this:UpdateToGame("percentSubmerged", value)
    end
    getTractionMultiplier = function (this)
      this:UpdateFromGame()
      return this.tractionMultiplier
    end
    setTractionMultiplier = function (this, value)
      this:UpdateToGame("tractionMultiplier", value)
    end
    getTractionLoss = function (this)
      this:UpdateFromGame()
      return this.tractionLoss
    end
    setTractionLoss = function (this, value)
      this:UpdateToGame("tractionLoss", value)
    end
    getTractionBias = function (this)
      this:UpdateFromGame()
      return this.tractionBias
    end
    setTractionBias = function (this, value)
      this:UpdateToGame("tractionBias", value)
    end
    getNumberOfGears = function (this)
      this:UpdateFromGame()
      return this.numberOfGears
    end
    setNumberOfGears = function (this, value)
      this:UpdateToGame("numberOfGears", value)
    end
    getMaxVelocity = function (this)
      this:UpdateFromGame()
      return this.maxVelocity
    end
    setMaxVelocity = function (this, value)
      this:UpdateToGame("maxVelocity", value)
    end
    getEngineAcceleration = function (this)
      this:UpdateFromGame()
      return this.engineAcceleration
    end
    setEngineAcceleration = function (this, value)
      this:UpdateToGame("engineAcceleration", value)
    end
    getEngineInertia = function (this)
      this:UpdateFromGame()
      return this.engineInertia
    end
    setEngineInertia = function (this, value)
      this:UpdateToGame("engineInertia", value)
    end
    getDriveType = function (this)
      this:UpdateFromGame()
      return this.driveType
    end
    setDriveType = function (this, value)
      this:UpdateToGame("driveType", value:ToEnumString(SlipeSharedVehicles.DriveType):ToLower())
    end
    getEngineType = function (this)
      this:UpdateFromGame()
      return this.engineType
    end
    setEngineType = function (this, value)
      this:UpdateToGame("engineType", value:ToEnumString(SlipeSharedVehicles.EngineType):ToLower())
    end
    getBrakeDeceleration = function (this)
      this:UpdateFromGame()
      return this.brakeDeceleration
    end
    setBrakeDeceleration = function (this, value)
      this:UpdateToGame("brakeDeceleration", value)
    end
    getBrakeBias = function (this)
      this:UpdateFromGame()
      return this.brakeBias
    end
    setBrakeBias = function (this, value)
      this:UpdateToGame("brakeBias", value)
    end
    getSteeringLock = function (this)
      this:UpdateFromGame()
      return this.steeringLock
    end
    setSteeringLock = function (this, value)
      this:UpdateToGame("steeringLock", value)
    end
    getSuspensionForceLevel = function (this)
      this:UpdateFromGame()
      return this.suspensionForceLevel
    end
    setSuspensionForceLevel = function (this, value)
      this:UpdateToGame("suspensionForceLevel", value)
    end
    getSuspensionDamping = function (this)
      this:UpdateFromGame()
      return this.suspensionDamping
    end
    setSuspensionDamping = function (this, value)
      this:UpdateToGame("suspensionDamping", value)
    end
    getSuspensionHighSpeedDamping = function (this)
      this:UpdateFromGame()
      return this.suspensionHighSpeedDamping
    end
    setSuspensionHighSpeedDamping = function (this, value)
      this:UpdateToGame("suspensionHighSpeedDamping", value)
    end
    getSuspensionUpperLimit = function (this)
      this:UpdateFromGame()
      return this.suspensionUpperLimit
    end
    setSuspensionUpperLimit = function (this, value)
      this:UpdateToGame("suspensionUpperLimit", value)
    end
    getSuspensionLowerLimit = function (this)
      this:UpdateFromGame()
      return this.suspensionLowerLimit
    end
    setSuspensionLowerLimit = function (this, value)
      this:UpdateToGame("suspensionLowerLimit", value)
    end
    getSuspensionFrontRearBias = function (this)
      this:UpdateFromGame()
      return this.suspensionFrontRearBias
    end
    setSuspensionFrontRearBias = function (this, value)
      this:UpdateToGame("suspensionFrontRearBias", value)
    end
    getSuspensionAntiDiveMultiplier = function (this)
      this:UpdateFromGame()
      return this.suspensionAntiDiveMultiplier
    end
    setSuspensionAntiDiveMultiplier = function (this, value)
      this:UpdateToGame("suspensionAntiDiveMultiplier", value)
    end
    getSeatOffsetDistance = function (this)
      this:UpdateFromGame()
      return this.seatOffsetDistance
    end
    setSeatOffsetDistance = function (this, value)
      this:UpdateToGame("seatOffsetDistance", value)
    end
    getCollisionDamageMultiplier = function (this)
      this:UpdateFromGame()
      return this.collisionDamageMultiplier
    end
    setCollisionDamageMultiplier = function (this, value)
      this:UpdateToGame("collisionDamageMultiplier", value)
    end
    getMonetary = function (this)
      this:UpdateFromGame()
      return this.monetary
    end
    getModelFlags = function (this)
      this:UpdateFromGame()
      return this.modelFlags
    end
    setModelFlags = function (this, value)
      this:UpdateToGame("modelFlags", value)
    end
    getHandlingFlags = function (this)
      this:UpdateFromGame()
      return this.handlingFlags
    end
    setHandlingFlags = function (this, value)
      this:UpdateToGame("handlingFlags", value)
    end
    getHeadLight = function (this)
      this:UpdateFromGame()
      return this.headLight
    end
    setHeadLight = function (this, value)
      this:UpdateToGame("headLight", value:ToEnumString(SlipeSharedVehicles.VehicleLightType):ToLower())
    end
    getTailLight = function (this)
      this:UpdateFromGame()
      return this.tailLight
    end
    setTailLight = function (this, value)
      this:UpdateToGame("tailLight", value:ToEnumString(SlipeSharedVehicles.VehicleLightType):ToLower())
    end
    getAnimationGroup = function (this)
      this:UpdateFromGame()
      return this.animGroup
    end
    setAnimationGroup = function (this, value)
      this:UpdateToGame("animGroup", value)
    end
    BuildFromTable = function (this, t)
      this.mass = System.cast(System.Single, t:get("mass"))
      this.turnMass = System.cast(System.Single, t:get("turnMass"))
      this.dragCoeff = System.cast(System.Single, t:get("dragCoeff"))
      local c = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(t:get("centerOfMass"), "System.Single", T)
      this.centerOfMass = SystemNumerics.Vector3(c:get(0), c:get(1), c:get(2))
      this.percentSubmerged = System.cast(System.Int32, t:get("percentSubmerged"))
      this.tractionMultiplier = System.cast(System.Single, t:get("tractionMultiplier"))
      this.tractionLoss = System.cast(System.Single, t:get("tractionLoss"))
      this.tractionBias = System.cast(System.Single, t:get("tractionBias"))
      this.numberOfGears = System.cast(System.Int32, t:get("numberOfGears"))
      this.maxVelocity = System.cast(System.Single, t:get("maxVelocity"))
      this.engineAcceleration = System.cast(System.Single, t:get("engineAcceleration"))
      this.engineInertia = System.cast(System.Single, t:get("engineInertia"))
      this.driveType = System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeSharedVehicles.DriveType), t:get("driveType"), true))
      this.engineType = System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeSharedVehicles.EngineType), t:get("engineType"), true))
      this.brakeDeceleration = System.cast(System.Single, t:get("brakeDeceleration"))
      this.brakeBias = System.cast(System.Single, t:get("brakeBias"))
      this.steeringLock = System.cast(System.Single, t:get("steeringLock"))
      this.suspensionForceLevel = System.cast(System.Single, t:get("suspensionForceLevel"))
      this.suspensionDamping = System.cast(System.Single, t:get("suspensionDamping"))
      this.suspensionHighSpeedDamping = System.cast(System.Single, t:get("suspensionHighSpeedDamping"))
      this.suspensionUpperLimit = System.cast(System.Single, t:get("suspensionUpperLimit"))
      this.suspensionLowerLimit = System.cast(System.Single, t:get("suspensionLowerLimit"))
      this.suspensionFrontRearBias = System.cast(System.Single, t:get("suspensionFrontRearBias"))
      this.suspensionAntiDiveMultiplier = System.cast(System.Single, t:get("suspensionAntiDiveMultiplier"))
      this.seatOffsetDistance = System.cast(System.Single, t:get("seatOffsetDistance"))
      this.collisionDamageMultiplier = System.cast(System.Single, t:get("collisionDamageMultiplier"))
      this.monetary = System.cast(System.Int32, t:get("monetary"))
      this.modelFlags = System.cast(System.UInt32, t:get("modelFlags"))
      this.handlingFlags = System.cast(System.UInt32, t:get("handlingFlags"))
      this.headLight = System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeSharedVehicles.VehicleLightType), t:get("headLight"), true))
      this.tailLight = System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeSharedVehicles.VehicleLightType), t:get("tailLight"), true))
      this.animGroup = System.cast(System.Int32, t:get("animGroup"))
    end
    UpdateFromGame = function (this)
      if this.vehicleElement ~= nil then
        BuildFromTable(this, SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeMtaDefinitions.MtaShared.GetVehicleHandling(this.vehicleElement), "System.String", "System.Dynamic"))
      end
    end
    UpdateToGame = function (this, key, value)
      if this.vehicleElement ~= nil then
        SlipeMtaDefinitions.MtaShared.SetVehicleHandling(this.vehicleElement, key, value)
      end
    end
    return {
      mass = 0,
      getMass = getMass,
      setMass = setMass,
      turnMass = 0,
      getTurnMass = getTurnMass,
      setTurnMass = setTurnMass,
      dragCoeff = 0,
      getDragCoefficient = getDragCoefficient,
      setDragCoefficient = setDragCoefficient,
      getCenterOfMass = getCenterOfMass,
      setCenterOfMass = setCenterOfMass,
      percentSubmerged = 0,
      getPercentSubmerged = getPercentSubmerged,
      setPercentSubmerged = setPercentSubmerged,
      tractionMultiplier = 0,
      getTractionMultiplier = getTractionMultiplier,
      setTractionMultiplier = setTractionMultiplier,
      tractionLoss = 0,
      getTractionLoss = getTractionLoss,
      setTractionLoss = setTractionLoss,
      tractionBias = 0,
      getTractionBias = getTractionBias,
      setTractionBias = setTractionBias,
      numberOfGears = 0,
      getNumberOfGears = getNumberOfGears,
      setNumberOfGears = setNumberOfGears,
      maxVelocity = 0,
      getMaxVelocity = getMaxVelocity,
      setMaxVelocity = setMaxVelocity,
      engineAcceleration = 0,
      getEngineAcceleration = getEngineAcceleration,
      setEngineAcceleration = setEngineAcceleration,
      engineInertia = 0,
      getEngineInertia = getEngineInertia,
      setEngineInertia = setEngineInertia,
      driveType = 0,
      getDriveType = getDriveType,
      setDriveType = setDriveType,
      engineType = 0,
      getEngineType = getEngineType,
      setEngineType = setEngineType,
      brakeDeceleration = 0,
      getBrakeDeceleration = getBrakeDeceleration,
      setBrakeDeceleration = setBrakeDeceleration,
      brakeBias = 0,
      getBrakeBias = getBrakeBias,
      setBrakeBias = setBrakeBias,
      steeringLock = 0,
      getSteeringLock = getSteeringLock,
      setSteeringLock = setSteeringLock,
      suspensionForceLevel = 0,
      getSuspensionForceLevel = getSuspensionForceLevel,
      setSuspensionForceLevel = setSuspensionForceLevel,
      suspensionDamping = 0,
      getSuspensionDamping = getSuspensionDamping,
      setSuspensionDamping = setSuspensionDamping,
      suspensionHighSpeedDamping = 0,
      getSuspensionHighSpeedDamping = getSuspensionHighSpeedDamping,
      setSuspensionHighSpeedDamping = setSuspensionHighSpeedDamping,
      suspensionUpperLimit = 0,
      getSuspensionUpperLimit = getSuspensionUpperLimit,
      setSuspensionUpperLimit = setSuspensionUpperLimit,
      suspensionLowerLimit = 0,
      getSuspensionLowerLimit = getSuspensionLowerLimit,
      setSuspensionLowerLimit = setSuspensionLowerLimit,
      suspensionFrontRearBias = 0,
      getSuspensionFrontRearBias = getSuspensionFrontRearBias,
      setSuspensionFrontRearBias = setSuspensionFrontRearBias,
      suspensionAntiDiveMultiplier = 0,
      getSuspensionAntiDiveMultiplier = getSuspensionAntiDiveMultiplier,
      setSuspensionAntiDiveMultiplier = setSuspensionAntiDiveMultiplier,
      seatOffsetDistance = 0,
      getSeatOffsetDistance = getSeatOffsetDistance,
      setSeatOffsetDistance = setSeatOffsetDistance,
      collisionDamageMultiplier = 0,
      getCollisionDamageMultiplier = getCollisionDamageMultiplier,
      setCollisionDamageMultiplier = setCollisionDamageMultiplier,
      monetary = 0,
      getMonetary = getMonetary,
      modelFlags = 0,
      getModelFlags = getModelFlags,
      setModelFlags = setModelFlags,
      handlingFlags = 0,
      getHandlingFlags = getHandlingFlags,
      setHandlingFlags = setHandlingFlags,
      headLight = 0,
      getHeadLight = getHeadLight,
      setHeadLight = setHeadLight,
      tailLight = 0,
      getTailLight = getTailLight,
      setTailLight = setTailLight,
      animGroup = 0,
      getAnimationGroup = getAnimationGroup,
      setAnimationGroup = setAnimationGroup,
      BuildFromTable = BuildFromTable,
      UpdateFromGame = UpdateFromGame,
      UpdateToGame = UpdateToGame,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      }
    }
  end)
end)
