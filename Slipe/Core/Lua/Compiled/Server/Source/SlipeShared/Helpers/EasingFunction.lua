-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SystemNumerics
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Shared.Helpers", function (namespace)
  -- <summary>
  -- Represents an easing function
  -- </summary>
  namespace.class("EasingFunction", function (namespace)
    local Interpolate, InterpolateVector, InterpolateVector1, getLinear, getInQuad, getOutQuad, getInOutQuad, getOutInQuad, 
    getInElastic, getOutElastic, getInOutElastic, getOutInElastic, getInBack, getOutBack, getInOutBack, getOutInBack, 
    getInBounce, getOutBounce, getInOutBounce, getOutInBounce, getSineCurve, getCosineCurve, class, __ctor1__, 
    __ctor2__
    __ctor1__ = function (this, name)
      this.Name = name
      this.Period = 0
      this.Amplitude = 0
      this.Overshoot = 0
    end
    -- <summary>
    -- Create a new easing function with different easing parameters
    -- </summary>
    -- <param name="period">The period of the function</param>
    -- <param name="amplitude">The amplitude of the function</param>
    -- <param name="overshoot">The overshoot of the function</param>
    __ctor2__ = function (this, function_, period, amplitude, overshoot)
      this.Name = function_.Name
      this.Period = period
      this.Amplitude = amplitude
      this.Overshoot = overshoot
    end
    -- <summary>
    -- Get the easing value of a function at a specific moment
    -- </summary>
    -- <returns>The easing value at this moment in the function</returns>
    Interpolate = function (this, progress)
      return SlipeMtaDefinitions.MtaShared.GetEasingValue(progress, this.Name, this.Period, this.Amplitude, this.Overshoot)
    end
    -- <summary>
    -- Get the easing value between two vectors
    -- </summary>
    -- <param name="end">The end vector</param>
    -- <param name="progress">The progress between the two vectors</param>
    -- <returns>The interpolated vector between the given two</returns>
    InterpolateVector = function (this, start, end_, progress)
      local r = SlipeMtaDefinitions.MtaShared.InterpolateBetween(start.X, start.Y, start.Z, end_.X, end_.Y, end_.Z, progress, this.Name, this.Period, this.Amplitude, this.Overshoot)
      return SystemNumerics.Vector3(r[1], r[2], r[3])
    end
    -- <summary>
    -- Get the easing value between two vectors
    -- </summary>
    -- <param name="end">The end vector</param>
    -- <param name="progress">The progress between the two vectors</param>
    -- <returns>The interpolated vector between the given two</returns>
    InterpolateVector1 = function (this, start, end_, progress)
      local r = InterpolateVector(this, SystemNumerics.Vector3(start, 0), SystemNumerics.Vector3(end_, 0), progress)
      return SystemNumerics.Vector2(r.X, r.Y)
    end
    getLinear = function ()
      return class("Linear")
    end
    getInQuad = function ()
      return class("InQuad")
    end
    getOutQuad = function ()
      return class("OutQuad")
    end
    getInOutQuad = function ()
      return class("InOutQuad")
    end
    getOutInQuad = function ()
      return class("OutInQuad")
    end
    getInElastic = function ()
      return class("InElastic")
    end
    getOutElastic = function ()
      return class("OutElastic")
    end
    getInOutElastic = function ()
      return class("InOutElastic")
    end
    getOutInElastic = function ()
      return class("OutInElastic")
    end
    getInBack = function ()
      return class("InBack")
    end
    getOutBack = function ()
      return class("OutBack")
    end
    getInOutBack = function ()
      return class("InOutBack")
    end
    getOutInBack = function ()
      return class("OutInBack")
    end
    getInBounce = function ()
      return class("InBounce")
    end
    getOutBounce = function ()
      return class("OutBounce")
    end
    getInOutBounce = function ()
      return class("InOutBounce")
    end
    getOutInBounce = function ()
      return class("OutInBounce")
    end
    getSineCurve = function ()
      return class("SineCurve")
    end
    getCosineCurve = function ()
      return class("CosineCurve")
    end
    class = {
      Period = 0,
      Amplitude = 0,
      Overshoot = 0,
      Interpolate = Interpolate,
      InterpolateVector = InterpolateVector,
      InterpolateVector1 = InterpolateVector1,
      getLinear = getLinear,
      getInQuad = getInQuad,
      getOutQuad = getOutQuad,
      getInOutQuad = getInOutQuad,
      getOutInQuad = getOutInQuad,
      getInElastic = getInElastic,
      getOutElastic = getOutElastic,
      getInOutElastic = getInOutElastic,
      getOutInElastic = getOutInElastic,
      getInBack = getInBack,
      getOutBack = getOutBack,
      getInOutBack = getInOutBack,
      getOutInBack = getOutInBack,
      getInBounce = getInBounce,
      getOutBounce = getOutBounce,
      getInOutBounce = getInOutBounce,
      getOutInBounce = getOutInBounce,
      getSineCurve = getSineCurve,
      getCosineCurve = getCosineCurve,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)
end)
