-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientRendering
local SlipeMtaDefinitions
local SlipeSharedElements
local SlipeSharedUtilities
local SystemNumerics
System.import(function (out)
  SlipeClientRendering = Slipe.Client.Rendering
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  SlipeSharedUtilities = Slipe.Shared.Utilities
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client", function (namespace)
  -- <summary>
  -- Class representing the camera of the local player
  -- </summary>
  namespace.class("Camera", function (namespace)
    local instance, getInstance, getTarget, setTarget, getInterior, setInterior, getNearClipDistance, setNearClipDistance, 
    getViewMode, setViewMode, getShakeLevel, setShakeLevel, SetMatrix, SetMatrix1, GetFullCameraMatrix, GetCameraMatrix, 
    Fade, Fade1, SetFieldOfView, GetFieldOfView, SetGoggleEffect, GetGoggleEffect, SetCameraClip, GetCameraClip, 
    GetScreenFromWorldPosition, GetWorldFromScreenPosition, IsLineOfSightClear, class
    getInstance = function ()
      if instance == nil then
        instance = class()
      end
      return instance
    end
    getTarget = function (this)
      return SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaClient.GetCameraTarget(), SlipeSharedElements.PhysicalElement)
    end
    setTarget = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetCameraTarget(value:getMTAElement())
    end
    getInterior = function (this)
      return SlipeMtaDefinitions.MtaClient.GetCameraInterior()
    end
    setInterior = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetCameraInterior(value)
    end
    getNearClipDistance = function (this)
      return SlipeMtaDefinitions.MtaClient.GetNearClipDistance()
    end
    setNearClipDistance = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetNearClipDistance(value)
    end
    getViewMode = function (this)
      return SlipeMtaDefinitions.MtaClient.GetCameraViewMode()
    end
    setViewMode = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetCameraViewMode(value)
    end
    getShakeLevel = function (this)
      return System.toByte(SlipeMtaDefinitions.MtaClient.GetCameraShakeLevel())
    end
    setShakeLevel = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetCameraShakeLevel(value)
    end
    -- <summary>
    -- Get and set the 4x4matrix, roll and field of view on the camera
    -- </summary>
    SetMatrix = function (this, matrix, roll, fov)
      System.throw(System.NotImplementedException())

      --Vector3 translation = matrix.Translation;
      --Vector3 forward = matrix.Forward;
      --Vector3 lookAt = translation + forward;

      --return MTAClient.SetCameraMatrix(player.MTAElement, translation.X, translation.Y, translation.Z, lookAt.X, lookAt.Y, lookAt.Z, roll, fov);
    end
    -- <summary>
    -- Get and set the matrix, roll and fox using vector3s for position and lookAt
    -- </summary>
    SetMatrix1 = function (this, position, lookAt, roll, fov)
      return SlipeMtaDefinitions.MtaClient.SetCameraMatrix(position.X, position.Y, position.Z, lookAt.X, lookAt.Y, lookAt.Z, roll, fov)
    end
    -- <summary>
    -- Retrieve the full camera matrix
    -- </summary>
    GetFullCameraMatrix = function (this)
      local result = SlipeMtaDefinitions.MtaClient.GetCameraMatrix()
      local position = SystemNumerics.Vector3(result[1], result[2], result[3])
      local rotation = SystemNumerics.Vector3(result[4], result[5], result[6])
      local roll = result[7]
      local yaw = result:getRest()
      return System.tuple(position, rotation, roll, yaw)
    end
    -- <summary>
    -- Retrieve the camera matrix as a matrix4x4 representation
    -- </summary>
    GetCameraMatrix = function (this)
      System.throw(System.NotImplementedException())

      --Tuple<float, float, float, float, float, float, float, float> result = MTAClient.GetCameraMatrix(player.MTAElement);
      --Vector3 position = new Vector3(result.Item1, result.Item2, result.Item3);
      --Vector3 rotation = new Vector3(result.Item4, result.Item5, result.Item6);
      --float roll = result.Item7;
      --float yaw = result.Rest;
      --return Matrix4x
    end
    -- <summary>
    -- Fade the camera to a color in a specific time
    -- </summary>
    Fade = function (this, fade, color, time)
      return SlipeMtaDefinitions.MtaClient.FadeCamera(fade == 0 --[[CameraFade.In]] and true or false, System.div(time, 1000), color:getR(), color:getG(), color:getB())
    end
    -- <summary>
    -- Fade to Black \m/
    -- </summary>
    Fade1 = function (this, fade)
      return Fade(this, fade, SlipeSharedUtilities.Color(0x000000), 1000)
    end
    -- <summary>
    -- Set the field of view of this camera on a specific mode
    -- </summary>
    SetFieldOfView = function (this, mode, fieldOfView)
      return SlipeMtaDefinitions.MtaClient.SetCameraFieldOfView(mode:ToEnumString(SlipeClientRendering.CameraMode):ToLower(), fieldOfView)
    end
    -- <summary>
    -- Get the field of view of a specific mode of the camera
    -- </summary>
    GetFieldOfView = function (this, mode)
      return SlipeMtaDefinitions.MtaClient.GetCameraFieldOfView(mode:ToEnumString(SlipeClientRendering.CameraMode):ToLower())
    end
    -- <summary>
    -- Set the goggle effect of this camera
    -- </summary>
    SetGoggleEffect = function (this, effect, noiseEnabled)
      return SlipeMtaDefinitions.MtaClient.SetCameraGoggleEffect(effect:ToEnumString(SlipeClientRendering.GoggleEffects):ToLower(), noiseEnabled)
    end
    -- <summary>
    -- Get the Goggleeffect of this camera
    -- </summary>
    GetGoggleEffect = function (this)
      return SlipeMtaDefinitions.MtaClient.GetCameraGoggleEffect()
    end
    -- <summary>
    -- Set if this camera clips with objects and/or vehicles
    -- </summary>
    SetCameraClip = function (this, objects, vehicles)
      return SlipeMtaDefinitions.MtaClient.SetCameraClip(objects, vehicles)
    end
    -- <summary>
    -- Get the clip settings of the camera
    -- </summary>
    GetCameraClip = function (this)
      return SlipeMtaDefinitions.MtaClient.GetCameraClip()
    end
    -- <summary>
    -- This function gets the screen position of a point in the world.
    -- </summary>
    GetScreenFromWorldPosition = function (this, position, edgeTolerance, relative)
      local result = SlipeMtaDefinitions.MtaClient.GetScreenFromWorldPosition(position.X, position.Y, position.Z, edgeTolerance, relative)
      return SystemNumerics.Vector2(result[1], result[2])
    end
    -- <summary>
    -- This function allows you to retrieve the world position corresponding to a 2D position on the screen, at a certain depth.
    -- </summary>
    GetWorldFromScreenPosition = function (this, position, depth)
      local result = SlipeMtaDefinitions.MtaClient.GetWorldFromScreenPosition(position.X, position.Y, depth)
      return SystemNumerics.Vector3(result[1], result[2], result[3])
    end
    -- <summary>
    -- This function checks if there are obstacles between two points of the game world, optionally ignoring certain kinds of elements. Use processLineOfSight if you want more information about what the ray hits.
    -- </summary>
    IsLineOfSightClear = function (this, start, end_, checkBuildings, checkVehicles, checkPeds, checkObjects, checkDummies, seeThroughStuff, ignoreSomeObjectsForCamera, ignoredElement)
      local default = ignoredElement
      if default ~= nil then
        default = default:getMTAElement()
      end
      return SlipeMtaDefinitions.MtaClient.IsLineOfSightClear(start.X, start.Y, start.Z, end_.X, end_.Y, end_.Z, checkBuildings, checkVehicles, checkPeds, checkObjects, checkDummies, seeThroughStuff, ignoreSomeObjectsForCamera, default)
    end
    class = {
      getInstance = getInstance,
      getTarget = getTarget,
      setTarget = setTarget,
      getInterior = getInterior,
      setInterior = setInterior,
      getNearClipDistance = getNearClipDistance,
      setNearClipDistance = setNearClipDistance,
      getViewMode = getViewMode,
      setViewMode = setViewMode,
      getShakeLevel = getShakeLevel,
      setShakeLevel = setShakeLevel,
      SetMatrix = SetMatrix,
      SetMatrix1 = SetMatrix1,
      GetFullCameraMatrix = GetFullCameraMatrix,
      GetCameraMatrix = GetCameraMatrix,
      Fade = Fade,
      Fade1 = Fade1,
      SetFieldOfView = SetFieldOfView,
      GetFieldOfView = GetFieldOfView,
      SetGoggleEffect = SetGoggleEffect,
      GetGoggleEffect = GetGoggleEffect,
      SetCameraClip = SetCameraClip,
      GetCameraClip = GetCameraClip,
      GetScreenFromWorldPosition = GetScreenFromWorldPosition,
      GetWorldFromScreenPosition = GetWorldFromScreenPosition,
      IsLineOfSightClear = IsLineOfSightClear
    }
    return class
  end)
end)
