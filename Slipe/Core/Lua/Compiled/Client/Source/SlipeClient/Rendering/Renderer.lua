-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientElements
local SlipeClientRendering
local SlipeMtaDefinitions
local SystemNumerics
System.import(function (out)
  SlipeClientElements = Slipe.Client.Elements
  SlipeClientRendering = Slipe.Client.Rendering
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.Rendering", function (namespace)
  -- <summary>
  -- Singleton responsible for rendering
  -- </summary>
  namespace.class("Renderer", function (namespace)
    local getInstance, getFpsLimit, setFpsLimit, getScreenSize, getBlendMode, setBlendMode, setTestMode, getStatus, 
    SetRenderTarget, RevertRenderTargetToScreen, SetAspectRatioAdjustmentEnabled, WorldFromScreenPosition, ScreenFromWorldPosition, class, __ctor__
    -- <summary>
    -- Creates an instance of the renderer
    -- </summary>
    __ctor__ = function (this)
      class.instance = this

      SlipeClientElements.RootElement.OnRender = SlipeClientElements.RootElement.OnRender + function ()
        local default = this.OnRender
        if default ~= nil then
          default()
        end
      end
      SlipeClientElements.RootElement.OnHUDRender = SlipeClientElements.RootElement.OnHUDRender + function ()
        local default = this.OnHudRender
        if default ~= nil then
          default()
        end
      end
    end
    getInstance = function ()
      class.instance = class.instance or class()
      return class.instance
    end
    getFpsLimit = function (this)
      return SlipeMtaDefinitions.MtaShared.GetFPSLimit()
    end
    setFpsLimit = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetFPSLimit(value)
    end
    getScreenSize = function (this)
      local size = SlipeMtaDefinitions.MtaClient.GuiGetScreenSize()
      return SystemNumerics.Vector2(size[1], size[2])
    end
    getBlendMode = function (this)
      return System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeClientRendering.BlendMode), SlipeMtaDefinitions.MtaClient.DxGetBlendMode(), true))
    end
    setBlendMode = function (this, value)
      SlipeMtaDefinitions.MtaClient.DxSetBlendMode(value:ToEnumString(SlipeClientRendering.BlendMode))
    end
    setTestMode = function (this, value)
      SlipeMtaDefinitions.MtaClient.DxSetTestMode(value:ToEnumString(SlipeClientRendering.TestMode))
    end
    getStatus = function (this)
      if this.status == nil then
        this.status = SlipeClientRendering.Status()
      end
      return this.status
    end
    -- <summary>
    -- This function changes the drawing destination for the dx functions.
    -- </summary>
    SetRenderTarget = function (this, target, clear)
      return SlipeMtaDefinitions.MtaClient.DxSetRenderTarget(target:getMaterialElement(), clear)
    end
    -- <summary>
    -- Reverts the current rendertarget to the screen
    -- </summary>
    RevertRenderTargetToScreen = function (this)
      return SlipeMtaDefinitions.MtaClient.DxSetRenderTarget()
    end
    -- <summary>
    -- This function allows for the positioning of dxDraw calls to be automatically adjusted according to the client's aspect ratio setting. This lasts for a single execution of an event handler for one of the following events: onClientRender, onClientPreRender and onClientHUDRender. So the function has to be called every frame, just like dxDraws.
    -- </summary>
    SetAspectRatioAdjustmentEnabled = function (this, enabled, sourceRatio)
      return SlipeMtaDefinitions.MtaClient.DxSetAspectRatioAdjustmentEnabled(enabled, sourceRatio)
    end
    -- <summary>
    -- Get the World position from a screen position
    -- </summary>
    WorldFromScreenPosition = function (this, screenPosition, depth)
      local result = SlipeMtaDefinitions.MtaClient.GetWorldFromScreenPosition(screenPosition.X, screenPosition.Y, depth)
      return SystemNumerics.Vector3(result[1], result[2], result[3])
    end
    -- <summary>
    -- Get the screen position from a world position
    -- </summary>
    ScreenFromWorldPosition = function (this, worldPosition, edgeTolerance, relative)
      local result = SlipeMtaDefinitions.MtaClient.GetScreenFromWorldPosition(worldPosition.X, worldPosition.Y, worldPosition.Z, edgeTolerance, relative)
      return SystemNumerics.Vector2(result[1], result[2])
    end
    class = {
      getInstance = getInstance,
      getFpsLimit = getFpsLimit,
      setFpsLimit = setFpsLimit,
      getScreenSize = getScreenSize,
      getBlendMode = getBlendMode,
      setBlendMode = setBlendMode,
      setTestMode = setTestMode,
      getStatus = getStatus,
      SetRenderTarget = SetRenderTarget,
      RevertRenderTargetToScreen = RevertRenderTargetToScreen,
      SetAspectRatioAdjustmentEnabled = SetAspectRatioAdjustmentEnabled,
      WorldFromScreenPosition = WorldFromScreenPosition,
      ScreenFromWorldPosition = ScreenFromWorldPosition,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
