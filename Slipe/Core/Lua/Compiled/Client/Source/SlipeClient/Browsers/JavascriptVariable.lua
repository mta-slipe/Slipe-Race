-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
end)
System.namespace("Slipe.Client.Browsers", function (namespace)
  -- <summary>
  -- Class to wrap different types of javascript variables
  -- </summary>
  namespace.class("JavascriptVariable", function (namespace)
    local ToString, __ctor1__, __ctor2__, __ctor3__, __ctor4__, __ctor5__, __ctor6__
    -- <summary>
    -- An empty js variable
    -- </summary>
    __ctor1__ = function (this)
      this.stringRepresentation = "null"
    end
    -- <summary>
    -- A js string variable
    -- </summary>
    __ctor2__ = function (this, value)
      this.stringRepresentation = "\"" .. value .. "\""
    end
    -- <summary>
    -- A js bool variable
    -- </summary>
    __ctor3__ = function (this, value)
      this.stringRepresentation = value:ToString():ToLower()
    end
    -- <summary>
    -- A js integer variable
    -- </summary>
    __ctor4__ = function (this, value)
      this.stringRepresentation = value:ToString()
    end
    -- <summary>
    -- A js float variable
    -- </summary>
    __ctor5__ = function (this, value)
      this.stringRepresentation = value:ToString()
    end
    -- <summary>
    -- Any MTA variable cast to a json
    -- </summary>
    __ctor6__ = function (this, value)
      this.stringRepresentation = SlipeMtaDefinitions.MtaShared.ToJSON(value, false, "none")
      -- remove MTA's stupid wrapping of JSONs
      this.stringRepresentation = this.stringRepresentation:Substring(1, #this.stringRepresentation - 2)
    end
    ToString = function (this)
      return this.stringRepresentation
    end
    return {
      ToString = ToString,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__,
        __ctor6__
      }
    }
  end)
end)
