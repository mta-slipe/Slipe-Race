-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientGame
local SlipeClientIO
local SlipeClientRendering
local SlipeMtaDefinitions
local SlipeSharedHelpers
System.import(function (out)
  SlipeClientGame = Slipe.Client.Game
  SlipeClientIO = Slipe.Client.IO
  SlipeClientRendering = Slipe.Client.Rendering
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedHelpers = Slipe.Shared.Helpers
end)
System.namespace("Slipe.Client.Game", function (namespace)
  -- <summary>
  -- Static class that handles calls to functions related to the client
  -- </summary>
  namespace.class("GameClient", function (namespace)
    local getRenderer, getInput, getEngine, console, getConsole, debug, getDebug, getIsVoiceEnabled, 
    getGuiInputEnabled, setGuiInputEnabled, getInputMode, setInputMode, getIsMainMenuActive, getIsMtaWindowActive, getIsTransferBoxActive, getTickCount, 
    version, getVersion, getLocalization, getIsTrayNotificationEnabled, CreateTrayNotification, SetClipboard, SetWindowFlashing, HandleUpdate, 
    HandleMinimize, HandleNetworkInteruption, HandleRestore, HandleStart, HandleStop, class
    getRenderer = function ()
      return SlipeClientRendering.Renderer.getInstance()
    end
    getInput = function ()
      return SlipeClientIO.Input.getInstance()
    end
    getEngine = function ()
      return SlipeClientGame.Engine.getInstance()
    end
    getConsole = function ()
      if console == nil then
        console = SlipeClientIO.MtaConsole()
      end
      return console
    end
    getDebug = function ()
      if debug == nil then
        debug = SlipeClientIO.MtaDebug()
      end
      return debug
    end
    getIsVoiceEnabled = function ()
      return SlipeMtaDefinitions.MtaShared.IsVoiceEnabled()
    end
    getGuiInputEnabled = function ()
      return SlipeMtaDefinitions.MtaClient.GuiGetInputEnabled()
    end
    setGuiInputEnabled = function (value)
      SlipeMtaDefinitions.MtaClient.GuiSetInputEnabled(value)
    end
    getInputMode = function ()
      return System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeClientGame.InputMode), SlipeMtaDefinitions.MtaClient.GuiGetInputMode(), true))
    end
    setInputMode = function (value)
      SlipeMtaDefinitions.MtaClient.GuiSetInputMode(value:ToEnumString(SlipeClientGame.InputMode):ToLower())
    end
    getIsMainMenuActive = function ()
      return SlipeMtaDefinitions.MtaClient.IsMainMenuActive()
    end
    getIsMtaWindowActive = function ()
      return SlipeMtaDefinitions.MtaClient.IsMTAWindowActive()
    end
    getIsTransferBoxActive = function ()
      return SlipeMtaDefinitions.MtaClient.IsTransferBoxActive()
    end
    getTickCount = function ()
      return SlipeMtaDefinitions.MtaShared.GetTickCount()
    end
    getVersion = function ()
      if version == nil then
        version = SlipeSharedHelpers.SystemVersion()
      end
      return version
    end
    getLocalization = function ()
      local d = SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeMtaDefinitions.MtaClient.GetLocalization(), "System.String", "System.String")
      return System.tuple(d:get("code"), d:get("name"))
    end
    getIsTrayNotificationEnabled = function ()
      return SlipeMtaDefinitions.MtaClient.IsTrayNotificationEnabled()
    end
    -- <summary>
    -- Create a windows tray notification
    -- </summary>
    CreateTrayNotification = function (text, trayIcon, useSound)
      SlipeMtaDefinitions.MtaClient.CreateTrayNotification(text, trayIcon:ToEnumString(SlipeClientGame.TrayIconType):ToLower(), useSound)
    end
    -- <summary>
    -- Set the client's clipboard text
    -- </summary>
    SetClipboard = function (text)
      return SlipeMtaDefinitions.MtaClient.SetClipboard(text)
    end
    -- <summary>
    -- Set the client's window flashing
    -- </summary>
    SetWindowFlashing = function (shouldFlash, count)
      return SlipeMtaDefinitions.MtaClient.SetWindowFlashing(shouldFlash, count)
    end
    HandleUpdate = function (timeSlice)
      local default = class.OnUpdate
      if default ~= nil then
        default(timeSlice)
      end
    end
    HandleMinimize = function ()
      local default = class.OnMinimize
      if default ~= nil then
        default()
      end
    end
    HandleNetworkInteruption = function (status, ticksSinceInteruptionStarted)
      local default = class.OnNetworkInteruption
      if default ~= nil then
        default(status, ticksSinceInteruptionStarted)
      end
    end
    HandleRestore = function (didClearRenderTargets)
      local default = class.OnRestore
      if default ~= nil then
        default(didClearRenderTargets)
      end
    end
    HandleStart = function (resource)
      local default = class.OnStart
      if default ~= nil then
        default(resource)
      end
    end
    HandleStop = function (resource)
      local default = class.OnStop
      if default ~= nil then
        default(resource)
      end
    end
    class = {
      getRenderer = getRenderer,
      getInput = getInput,
      getEngine = getEngine,
      getConsole = getConsole,
      getDebug = getDebug,
      getIsVoiceEnabled = getIsVoiceEnabled,
      getGuiInputEnabled = getGuiInputEnabled,
      setGuiInputEnabled = setGuiInputEnabled,
      getInputMode = getInputMode,
      setInputMode = setInputMode,
      getIsMainMenuActive = getIsMainMenuActive,
      getIsMtaWindowActive = getIsMtaWindowActive,
      getIsTransferBoxActive = getIsTransferBoxActive,
      getTickCount = getTickCount,
      getVersion = getVersion,
      getLocalization = getLocalization,
      getIsTrayNotificationEnabled = getIsTrayNotificationEnabled,
      CreateTrayNotification = CreateTrayNotification,
      SetClipboard = SetClipboard,
      SetWindowFlashing = SetWindowFlashing,
      HandleUpdate = HandleUpdate,
      HandleMinimize = HandleMinimize,
      HandleNetworkInteruption = HandleNetworkInteruption,
      HandleRestore = HandleRestore,
      HandleStart = HandleStart,
      HandleStop = HandleStop
    }
    return class
  end)
end)
